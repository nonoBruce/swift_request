//
//  HttpConnect.m
//  HttpConection
//
//  Created by yanwsh on 1/4/14.
//  Copyright (c) 2014 ict. All rights reserved.
//

#import "HttpConnect.h"
#import "JSON.h"

@interface HttpConnect(){
    HttpAsynRequest *_httpAsynRequest;
}
@end

@implementation HttpConnect

@synthesize connectDelegate=_connectDelegate;
-(void)dealloc{
    if(_httpAsynRequest!=nil){
        [_httpAsynRequest release];
    }
    [super dealloc];
}

-(id)init{
    if(self=[super init]){
        
    }
    return self;
}

#pragma mark 数据请求
////----
- (id)initWithCommunication:(CommunicationType)cType
                   delegate:(id<CommunicationDelegate>)delegate
                requestData:(NSMutableDictionary *)dic{
//    if(nil == dic)
//        return 0;
    _comType = cType;
    _comDelegate = delegate;////----
    NSString *url = [self request:dic];
    [self httpRequest:url requestData:dic];
    return nil;
}
////----发送头部和url
- (void)httpRequest:(NSString *)url requestData:(NSMutableDictionary *)dic{
    //body和url的创建
    NSMutableURLRequest *request = [[[NSMutableURLRequest alloc] init] autorelease];
    if(dic!=nil){
        if (![NSJSONSerialization isValidJSONObject:dic]){
            NSLog(@"inValidJSONObject");
        }
        NSError *error;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:dic options:NSJSONWritingPrettyPrinted error:&error];
        
        if(jsonData == nil){////----在系通5.0之前的用sbjson把dic转为json格式的数据流。
            NSString *str = [dic JSONFragment];
            jsonData = [str dataUsingEncoding: NSUTF8StringEncoding];
        }
        NSString *json =[[[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding] autorelease];
        NSString *postLength = [NSString stringWithFormat:@"%d", [json length]];
        //发送请求
        [request setValue:postLength forHTTPHeaderField:@"Content-Length"];////--一般不发送字符串长度也可以返回数据
        [request setHTTPBody:jsonData];
    }
    NSURL *requestUrl = [NSURL URLWithString:url];
    [request setHTTPMethod:@"POST"];
    [request setURL:requestUrl];
    [request setValue:@"application/json"forHTTPHeaderField:@"Content-Type"];
    [request setTimeoutInterval:15];//最长15秒的设置
    
    _httpAsynRequest = [[HttpAsynRequest alloc] init];
    if(nil != request){
        [_httpAsynRequest loadHttpData:request delegate:self];
    }
}

#pragma mark 返回的数据
-(void) onAsyncFinished:(NSURLConnection*)strUrl data:(NSMutableData*) finshData
{
	if(finshData == nil)
		return;
    
    
    NSStringEncoding encodingGBK = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);
    NSStringEncoding encodingUTF8 = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingUTF8);
    NSString *returnStr = [[[NSString alloc] initWithData:finshData encoding:encodingUTF8] autorelease];////----先进行urf－8解析
    if(returnStr == nil){////----如果解析为空的话，在对其进行bgk解析。
        returnStr = [[[NSString alloc] initWithData:finshData encoding:encodingGBK] autorelease];
    }
    NSData *aData = [returnStr dataUsingEncoding: NSUTF8StringEncoding];
    
    HttpCommunicationResult *communicateResult = [[[HttpCommunicationResult alloc] init] autorelease];
//    communicateResult.SysResultInfo = returnStr;
    
    ////----把data转化为字典
    NSError *error ;
    NSDictionary *dataDic = nil;
    if(aData != nil){
        dataDic = [NSJSONSerialization JSONObjectWithData:aData options:kNilOptions error:&error];
    }
    if(aData!=nil && dataDic == nil){////----在系通5.0之前的用sbjson解析，
        SBJSON *json = [[[SBJSON alloc] init] autorelease];
		dataDic = [json objectWithString:returnStr];
    }
    
    
    communicateResult = (HttpCommunicationResult*)[self parseData:dataDic httpResult:communicateResult];
	[self doComDelegateWithObject:communicateResult];
}

-(void) LoadAsyncError:(NSURLConnection*)strUrl error:(NSError *)error
{
	HttpCommunicationResult* result = [[[HttpCommunicationResult alloc] init] autorelease];
	if(error != nil)
	{
        ////----有正常的结果返回
	}
	
	[self doComFailDelegate:result error:error];
    
}


#pragma mark 这边三个函数为了和HttpCommunicationResult中的协议的返回函数一致

//-(void)doComDelegate
//{
//	if (_comDelegate && [(id)_comDelegate respondsToSelector:@selector(didLoadFinish:)])
//	{
//		[_comDelegate didLoadFinish:_comType];
//	}
//}

-(void)doComDelegateWithObject:(HttpCommunicationResult*)object
{
	if (_comDelegate && [(id)_comDelegate respondsToSelector:@selector(didLoadFinishWithObject:result:)])
	{
		[_comDelegate didLoadFinishWithObject:_comType result:object];
	}
    [self didConnectEnd];
}

-(void)doComFailDelegate:(HttpCommunicationResult*)result error:(NSError *)error
{
	if (_comDelegate && [(id)_comDelegate respondsToSelector:@selector(didFailWithError:result:error:)])
	{
		[_comDelegate didFailWithError:_comType result:result error:error];
	}
    [self didConnectEnd];
}

#pragma mark 数据请求结束后 释放 request的内容
-(void)didConnectEnd{
    if(_connectDelegate!=nil && [(id)_connectDelegate respondsToSelector:@selector(didAsyncFinish:)]){
        [_connectDelegate didAsyncFinish:self];
    }
}


#pragma mark 以下是具体请求类中会调用到的函数

////----解析调用
- (HttpCommunicationResult *)parseData:(NSDictionary *)returnDic httpResult:(HttpCommunicationResult*)httpResult{
    
    return 0;
}

////----请求调用
- (NSString *)request:(NSMutableDictionary *)dic{
    return 0;
}

@end
